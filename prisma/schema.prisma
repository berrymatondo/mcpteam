// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(cuid())
  name          String
  emailVerified Boolean
  image         String?
  isAdmin       Boolean   @default(false)

  sessions      Session[]
  accounts      Account[]

  email     String   @unique
  nom       String?
  prenom    String?
  telephone String?
  avatar    String?
  statut    UserStatut @default(ACTIF)
  role      UserRole   @default(MEMBRE)
  poleId    String?
  pole      Pole?      @relation(fields: [poleId], references: [id])
  dateNaissance DateTime?
  dateEmbauche  DateTime?
  adresse   String?
  ville     String?
  codePostal String?
  competences String[]
  bio       String?
  
  // Relations
  candidatures     Candidature[]
  eventsOrganises  Event[]       @relation("EventOrganizer")
  eventsParticipes EventParticipant[]
  messagesEnvoyes  Message[]     @relation("MessageSender")
  messagesRecus    Message[]     @relation("MessageReceiver")
  permissions      UserPermission[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String     @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String     @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Pole {
  id          String @id @default(cuid())
  nom         String @unique
  description String?
  couleur     String @default("#3B82F6")
  icone       String?
  responsableId String?
  
  // Relations
  membres      User[]
  candidatures Candidature[]
  events       Event[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("poles")
}

model Candidature {
  id          String @id @default(cuid())
  nom         String
  prenom      String
  email       String
  telephone   String?
  motivation  String
  cv          String?
  statut      CandidatureStatut @default(EN_ATTENTE)
  poleId      String
  pole        Pole @relation(fields: [poleId], references: [id])
  evaluateurId String?
  evaluateur  User? @relation(fields: [evaluateurId], references: [id])
  commentaires String?
  dateEntretien DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("candidatures")
}

model Event {
  id          String @id @default(cuid())
  titre       String
  description String?
  dateDebut   DateTime
  dateFin     DateTime
  lieu        String?
  capacite    Int?
  type        EventType
  statut      EventStatut @default(PLANIFIE)
  organisateurId String
  organisateur User @relation("EventOrganizer", fields: [organisateurId], references: [id])
  poleId      String?
  pole        Pole? @relation(fields: [poleId], references: [id])
  
  // Relations
  participants EventParticipant[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("events")
}

model EventParticipant {
  id      String @id @default(cuid())
  eventId String
  event   Event @relation(fields: [eventId], references: [id], onDelete: Cascade)
  userId  String
  user    User @relation(fields: [userId], references: [id], onDelete: Cascade)
  statut  ParticipationStatut @default(CONFIRME)
  
  createdAt DateTime @default(now())

  @@unique([eventId, userId])
  @@map("event_participants")
}

model Message {
  id         String @id @default(cuid())
  contenu    String
  senderId   String
  sender     User @relation("MessageSender", fields: [senderId], references: [id])
  receiverId String
  receiver   User @relation("MessageReceiver", fields: [receiverId], references: [id])
  lu         Boolean @default(false)
  
  createdAt DateTime @default(now())

  @@map("messages")
}

model Permission {
  id          String @id @default(cuid())
  nom         String @unique
  description String?
  module      String
  action      String
  
  // Relations
  userPermissions UserPermission[]
  
  createdAt DateTime @default(now())

  @@map("permissions")
}

model UserPermission {
  id           String @id @default(cuid())
  userId       String
  user         User @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, permissionId])
  @@map("user_permissions")
}

// Enums
enum UserStatut {
  ACTIF
  INACTIF
  SUSPENDU
}

enum UserRole {
  ADMIN
  MANAGER
  MEMBRE
}

enum CandidatureStatut {
  EN_ATTENTE
  EN_COURS
  ACCEPTEE
  REFUSEE
  REPORTEE
}

enum EventType {
  REUNION
  FORMATION
  CONFERENCE
  ATELIER
  SEMINAIRE
  AUTRE
}

enum EventStatut {
  PLANIFIE
  EN_COURS
  TERMINE
  ANNULE
}

enum ParticipationStatut {
  CONFIRME
  EN_ATTENTE
  DECLINE
}